Tests 7-base_geometry.py

Import the function
::
	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Test 1
::
	>>> bg = BaseGeometry()
	>>> bg.area()
	Traceback (most recent call last):
	...
	Exception: area() is not implemented

Test 2
	>>> bg.integer_validator("name", "John")
	Traceback (most recent call last):
	...
	TypeError: name must be an integer

Test 3
	>>> bg.integer_validator("age", 0)
	Traceback (most recent call last):
	...
	ValueError: age must be greater than 0

Test 4: bools passed as second arg
	>>> bg.integer_validator("age", True)
	Traceback (most recent call last):
	...
	TypeError: age must be an integer

Test 5: float passed as second arg
	>>> bg.integer_validator("age", 89.98)
	Traceback (most recent call last):
	...
	TypeError: age must be an integer

Test 5: value is 0 again:
	>>> bg.integer_validator("distance", 0)
	Traceback (most recent call last):
	...
	ValueError: distance must be greater than 0

Test 6: area
::
	>>> bg.area()
	Traceback (most recent call last):
	...
	Exception: area() is not implemented

Test 7: value is bool
::
	>>> bg.integer_validator("hush", True)
	Traceback (most recent call last):
	...
	TypeError: hush must be an integer

Test 8: value is list
::
	>>> bg.integer_validator("list", [9, 9])
	Traceback (most recent call last):
	...
	TypeError: list must be an integer

Test 9: value is less than 0
::
	>>> bg.integer_validator("distance", -4)
	Traceback (most recent call last):
	...
	ValueError: distance must be greater than 0

Test 10: dict type for value
::
	>>> bg.integer_validator("dict", {"key": "value"})
	Traceback (most recent call last):
	...
	TypeError: dict must be an integer

Test 11: set type for value
::
	>>> bg.integer_validator("frozenset", frozenset(["hey", "nigga"]))
	Traceback (most recent call last):
	...
	TypeError: frozenset must be an integer


Test 12: No arguments passed
::
	>>> bg.integer_validator()
	Traceback (most recent call last):
	...
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Checking for only 1 argument to integer_validator:
	>>> bg.integer_validator("integer")
	Traceback (most recent call last):
	...
	TypeError: integer_validator() missing 1 required positional argument: 'value'

Checking for too many arguments:
	>>> bg.integer_validator("integer", 1, 2)
	Traceback (most recent call last):
	...
	TypeError: integer_validator() takes 3 positional arguments but 4 were given
